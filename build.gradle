// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'fabric-loom' version '1.0-SNAPSHOT'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
}

def getGitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

if (cbc_release == "true") {
    version = "${mc_version}-${cbc_release_version}"
}
else {
    version = "${mc_version}-nightly-${getGitHash}"
}

group = 'rbasamoyai.createbigcannons' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'createbigcannons'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

loom.accessWidenerPath = file("src/main/resources/bigcannons.accesswidener")

repositories {
	maven {
		// JEI
		name 'Progwm16 maven'
		url 'https://dvs1.progwml6.com/files/maven'
	}
    maven {
    	// Mixed mappings, Registrate, Flywheel
    	name 'tterrag maven'
    	url 'https://maven.tterrag.com'
    }
    maven {
    	url 'https://www.cursemaven.com'
    	content {
    		includeGroup "curse.maven"
    	}
    }
    maven {
        url = "https://maven.jamieswhiteshirt.com/libs-release"
        content {
            includeGroup("com.jamieswhiteshirt")
        }
    }
    maven { url = "https://jitpack.io" }
    maven { url = "https://api.modrinth.com/maven" }
    maven { url = "https://mvn.devos.one/snapshots/" }
    maven { url = "https://maven.terraformersmc.com/" }
    maven { url = "https://maven.cafeteria.dev/releases/" }
    maven { url = "https://ladysnake.jfrog.io/artifactory/mods" }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.mc_version}"
    mappings loom.officialMojangMappings()
    modImplementation("net.fabricmc:fabric-loader:${project.loader_version}")
    modImplementation("net.fabricmc.fabric-api:fabric-api:${project.fabric_version}")
    modImplementation(include("io.github.fabricators_of_create.Porting-Lib:porting-lib:${project.port_lib_version}+${project.mc_version}"))
    modImplementation("com.tterrag.registrate_fabric:Registrate:${project.registrate_version}")
    modImplementation("com.jozufozu.flywheel:flywheel-fabric-${mc_version}:${project.flywheel_version}")
    
    modImplementation("com.simibubi.create:create-fabric-${mc_version}:${create_version}") // Create

    modImplementation(include("curse.maven:forge-config-api-port-fabric-547434:${forge_config_version}"))
    modImplementation("com.electronwill.night-config:core:${project.night_config_core_version}")
    modImplementation("com.electronwill.night-config:toml:${project.night_config_toml_version}")
    modImplementation("com.github.AlphaMode:fakeconfig:master-SNAPSHOT") { exclude(group: "net.fabricmc.fabric-api") }
    modImplementation("com.github.AlphaMode:fakeconfigtoml:master-SNAPSHOT") { exclude(group: "net.fabricmc.fabric-api") }
    
    // JEI
//    modCompileOnlyApi("mezz.jei:jei-${mc_version}-common-api:${jei_version}")
//    modCompileOnlyApi("mezz.jei:jei-${mc_version}-fabric:${jei_version}")
    modCompileOnly("mezz.jei:jei-${project.mc_version}-fabric:${project.jei_version}") { transitive = false }
    modRuntimeOnly("mezz.jei:jei-${project.mc_version}-fabric:${project.jei_version}")
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "createbigcannons",
                "Specification-Vendor"    : "rbasamoyai",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "rbasamoyai",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs": "createbigcannons.mixins.json"
        ])
    }
}

// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('remapJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

task assumeUnchanged(type: Exec){
    workingDir(project.rootDir)
    commandLine 'git', 'update-index', '--assume-unchanged', '.classpath', '.project', '.settings/org.eclipse.buildship.core.prefs'
}

tasks.matching { it.name != 'assumeUnchanged' }.all { Task task ->
    task.dependsOn assumeUnchanged
}
